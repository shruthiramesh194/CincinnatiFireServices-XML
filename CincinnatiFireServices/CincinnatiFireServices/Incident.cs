// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("address_x")]
        public string AddressX { get; set; }

        [JsonProperty("latitude_x", NullValueHandling = NullValueHandling.Ignore)]
        public string LatitudeX { get; set; }

        [JsonProperty("longitude_x", NullValueHandling = NullValueHandling.Ignore)]
        public string LongitudeX { get; set; }

        [JsonProperty("agency")]
        public Agency Agency { get; set; }

        [JsonProperty("create_time_incident")]
        public DateTimeOffset CreateTimeIncident { get; set; }

        [JsonProperty("disposition_text", NullValueHandling = NullValueHandling.Ignore)]
        public DispositionText? DispositionText { get; set; }

        [JsonProperty("event_number")]
        public string EventNumber { get; set; }

        [JsonProperty("incident_type_id")]
        public IncidentTypeId IncidentTypeId { get; set; }

        [JsonProperty("incident_type_desc")]
        public IncidentTypeDesc IncidentTypeDesc { get; set; }

        [JsonProperty("neighborhood")]
        public string Neighborhood { get; set; }

        [JsonProperty("arrival_time_primary_unit", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ArrivalTimePrimaryUnit { get; set; }

        [JsonProperty("beat")]
        public BeatUnion Beat { get; set; }

        [JsonProperty("closed_time_incident", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ClosedTimeIncident { get; set; }

        [JsonProperty("dispatch_time_primary_unit", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DispatchTimePrimaryUnit { get; set; }

        [JsonProperty("cfd_incident_type", NullValueHandling = NullValueHandling.Ignore)]
        public CfdIncidentType? CfdIncidentType { get; set; }

        [JsonProperty("cfd_incident_type_group", NullValueHandling = NullValueHandling.Ignore)]
        public CfdIncidentTypeGroup? CfdIncidentTypeGroup { get; set; }

        [JsonProperty("community_council_neighborhood")]
        public string CommunityCouncilNeighborhood { get; set; }
    }

    public enum Agency { Cf, Cfd };

    public enum BeatEnum { OtherJuris8, St02, St03, St05, St07, St08, St09, St12, St14, St17, St18, St19, St20, St21, St23, St24, St29, St31, St32, St34, St35, St37, St38, St46, St49, St50, St51 };

    public enum CfdIncidentType { Als, Bls };

    public enum CfdIncidentTypeGroup { AbdominalPainProblems, PregnancyChildbirthMiscarriage, TrafficTransportationIncidents };

    public enum DispositionText { AvAdvised, CnCancel, DefDefaultEmsNoTransport, DupfDuplicate, DuplicateIncident, EmsDisregard, EmsFalse, EmsNoTransport, EmsNoTransportInInvestig, EmsdDisregard, EmsfFalse, FdFireDisregard, GiGoodIntent, InInvestigation, MedMtResponseNoTransport, MeddMtDisregarded, MedfMtResponseFalse, MedicDisregard, MedicTrRespNoTransport, MedicTrRespTransported, MedtMedicTransport, PtPrivateTransport, TreatedByCompanyNoTrnsport, UsedClearButton };

    public enum IncidentTypeDesc { AbdominalPain, The1StPartyCallerWithInjuryToNotDangerousBodyArea, The1StTrimesterHemorrhageOrMiscarriage, The1StTrimesterSeriousHemorrhage, The2NdTrimesterHemorrhageOrMiscarriage, The3RdTrimesterHemorrhage, The911CallNoEmergencyIndicatedNoSpecifics };

    public enum IncidentTypeId { The1A1, The24A1, The24C1, The24C2, The24D4, The29A1, The911Call };

    public partial struct BeatUnion
    {
        public BeatEnum? Enum;
        public long? Integer;

        public static implicit operator BeatUnion(BeatEnum Enum) => new BeatUnion { Enum = Enum };
        public static implicit operator BeatUnion(long Integer) => new BeatUnion { Integer = Integer };
    }

    public partial class Welcome
    {
        public static List<Welcome> FromJson(string json) => JsonConvert.DeserializeObject<List<Welcome>>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Welcome> self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AgencyConverter.Singleton,
                BeatUnionConverter.Singleton,
                BeatEnumConverter.Singleton,
                CfdIncidentTypeConverter.Singleton,
                CfdIncidentTypeGroupConverter.Singleton,
                DispositionTextConverter.Singleton,
                IncidentTypeDescConverter.Singleton,
                IncidentTypeIdConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AgencyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Agency) || t == typeof(Agency?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CF":
                    return Agency.Cf;
                case "CFD":
                    return Agency.Cfd;
            }
            throw new Exception("Cannot unmarshal type Agency");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Agency)untypedValue;
            switch (value)
            {
                case Agency.Cf:
                    serializer.Serialize(writer, "CF");
                    return;
                case Agency.Cfd:
                    serializer.Serialize(writer, "CFD");
                    return;
            }
            throw new Exception("Cannot marshal type Agency");
        }

        public static readonly AgencyConverter Singleton = new AgencyConverter();
    }

    internal class BeatUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BeatUnion) || t == typeof(BeatUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "OTHER JURIS 8":
                            return new BeatUnion { Enum = BeatEnum.OtherJuris8 };
                        case "ST02":
                            return new BeatUnion { Enum = BeatEnum.St02 };
                        case "ST03":
                            return new BeatUnion { Enum = BeatEnum.St03 };
                        case "ST05":
                            return new BeatUnion { Enum = BeatEnum.St05 };
                        case "ST07":
                            return new BeatUnion { Enum = BeatEnum.St07 };
                        case "ST08":
                            return new BeatUnion { Enum = BeatEnum.St08 };
                        case "ST09":
                            return new BeatUnion { Enum = BeatEnum.St09 };
                        case "ST12":
                            return new BeatUnion { Enum = BeatEnum.St12 };
                        case "ST14":
                            return new BeatUnion { Enum = BeatEnum.St14 };
                        case "ST17":
                            return new BeatUnion { Enum = BeatEnum.St17 };
                        case "ST18":
                            return new BeatUnion { Enum = BeatEnum.St18 };
                        case "ST19":
                            return new BeatUnion { Enum = BeatEnum.St19 };
                        case "ST20":
                            return new BeatUnion { Enum = BeatEnum.St20 };
                        case "ST21":
                            return new BeatUnion { Enum = BeatEnum.St21 };
                        case "ST23":
                            return new BeatUnion { Enum = BeatEnum.St23 };
                        case "ST24":
                            return new BeatUnion { Enum = BeatEnum.St24 };
                        case "ST29":
                            return new BeatUnion { Enum = BeatEnum.St29 };
                        case "ST31":
                            return new BeatUnion { Enum = BeatEnum.St31 };
                        case "ST32":
                            return new BeatUnion { Enum = BeatEnum.St32 };
                        case "ST34":
                            return new BeatUnion { Enum = BeatEnum.St34 };
                        case "ST35":
                            return new BeatUnion { Enum = BeatEnum.St35 };
                        case "ST37":
                            return new BeatUnion { Enum = BeatEnum.St37 };
                        case "ST38":
                            return new BeatUnion { Enum = BeatEnum.St38 };
                        case "ST46":
                            return new BeatUnion { Enum = BeatEnum.St46 };
                        case "ST49":
                            return new BeatUnion { Enum = BeatEnum.St49 };
                        case "ST50":
                            return new BeatUnion { Enum = BeatEnum.St50 };
                        case "ST51":
                            return new BeatUnion { Enum = BeatEnum.St51 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new BeatUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type BeatUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (BeatUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case BeatEnum.OtherJuris8:
                        serializer.Serialize(writer, "OTHER JURIS 8");
                        return;
                    case BeatEnum.St02:
                        serializer.Serialize(writer, "ST02");
                        return;
                    case BeatEnum.St03:
                        serializer.Serialize(writer, "ST03");
                        return;
                    case BeatEnum.St05:
                        serializer.Serialize(writer, "ST05");
                        return;
                    case BeatEnum.St07:
                        serializer.Serialize(writer, "ST07");
                        return;
                    case BeatEnum.St08:
                        serializer.Serialize(writer, "ST08");
                        return;
                    case BeatEnum.St09:
                        serializer.Serialize(writer, "ST09");
                        return;
                    case BeatEnum.St12:
                        serializer.Serialize(writer, "ST12");
                        return;
                    case BeatEnum.St14:
                        serializer.Serialize(writer, "ST14");
                        return;
                    case BeatEnum.St17:
                        serializer.Serialize(writer, "ST17");
                        return;
                    case BeatEnum.St18:
                        serializer.Serialize(writer, "ST18");
                        return;
                    case BeatEnum.St19:
                        serializer.Serialize(writer, "ST19");
                        return;
                    case BeatEnum.St20:
                        serializer.Serialize(writer, "ST20");
                        return;
                    case BeatEnum.St21:
                        serializer.Serialize(writer, "ST21");
                        return;
                    case BeatEnum.St23:
                        serializer.Serialize(writer, "ST23");
                        return;
                    case BeatEnum.St24:
                        serializer.Serialize(writer, "ST24");
                        return;
                    case BeatEnum.St29:
                        serializer.Serialize(writer, "ST29");
                        return;
                    case BeatEnum.St31:
                        serializer.Serialize(writer, "ST31");
                        return;
                    case BeatEnum.St32:
                        serializer.Serialize(writer, "ST32");
                        return;
                    case BeatEnum.St34:
                        serializer.Serialize(writer, "ST34");
                        return;
                    case BeatEnum.St35:
                        serializer.Serialize(writer, "ST35");
                        return;
                    case BeatEnum.St37:
                        serializer.Serialize(writer, "ST37");
                        return;
                    case BeatEnum.St38:
                        serializer.Serialize(writer, "ST38");
                        return;
                    case BeatEnum.St46:
                        serializer.Serialize(writer, "ST46");
                        return;
                    case BeatEnum.St49:
                        serializer.Serialize(writer, "ST49");
                        return;
                    case BeatEnum.St50:
                        serializer.Serialize(writer, "ST50");
                        return;
                    case BeatEnum.St51:
                        serializer.Serialize(writer, "ST51");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type BeatUnion");
        }

        public static readonly BeatUnionConverter Singleton = new BeatUnionConverter();
    }

    internal class BeatEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BeatEnum) || t == typeof(BeatEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "OTHER JURIS 8":
                    return BeatEnum.OtherJuris8;
                case "ST02":
                    return BeatEnum.St02;
                case "ST03":
                    return BeatEnum.St03;
                case "ST05":
                    return BeatEnum.St05;
                case "ST07":
                    return BeatEnum.St07;
                case "ST08":
                    return BeatEnum.St08;
                case "ST09":
                    return BeatEnum.St09;
                case "ST12":
                    return BeatEnum.St12;
                case "ST14":
                    return BeatEnum.St14;
                case "ST17":
                    return BeatEnum.St17;
                case "ST18":
                    return BeatEnum.St18;
                case "ST19":
                    return BeatEnum.St19;
                case "ST20":
                    return BeatEnum.St20;
                case "ST21":
                    return BeatEnum.St21;
                case "ST23":
                    return BeatEnum.St23;
                case "ST24":
                    return BeatEnum.St24;
                case "ST29":
                    return BeatEnum.St29;
                case "ST31":
                    return BeatEnum.St31;
                case "ST32":
                    return BeatEnum.St32;
                case "ST34":
                    return BeatEnum.St34;
                case "ST35":
                    return BeatEnum.St35;
                case "ST37":
                    return BeatEnum.St37;
                case "ST38":
                    return BeatEnum.St38;
                case "ST46":
                    return BeatEnum.St46;
                case "ST49":
                    return BeatEnum.St49;
                case "ST50":
                    return BeatEnum.St50;
                case "ST51":
                    return BeatEnum.St51;
            }
            throw new Exception("Cannot unmarshal type BeatEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BeatEnum)untypedValue;
            switch (value)
            {
                case BeatEnum.OtherJuris8:
                    serializer.Serialize(writer, "OTHER JURIS 8");
                    return;
                case BeatEnum.St02:
                    serializer.Serialize(writer, "ST02");
                    return;
                case BeatEnum.St03:
                    serializer.Serialize(writer, "ST03");
                    return;
                case BeatEnum.St05:
                    serializer.Serialize(writer, "ST05");
                    return;
                case BeatEnum.St07:
                    serializer.Serialize(writer, "ST07");
                    return;
                case BeatEnum.St08:
                    serializer.Serialize(writer, "ST08");
                    return;
                case BeatEnum.St09:
                    serializer.Serialize(writer, "ST09");
                    return;
                case BeatEnum.St12:
                    serializer.Serialize(writer, "ST12");
                    return;
                case BeatEnum.St14:
                    serializer.Serialize(writer, "ST14");
                    return;
                case BeatEnum.St17:
                    serializer.Serialize(writer, "ST17");
                    return;
                case BeatEnum.St18:
                    serializer.Serialize(writer, "ST18");
                    return;
                case BeatEnum.St19:
                    serializer.Serialize(writer, "ST19");
                    return;
                case BeatEnum.St20:
                    serializer.Serialize(writer, "ST20");
                    return;
                case BeatEnum.St21:
                    serializer.Serialize(writer, "ST21");
                    return;
                case BeatEnum.St23:
                    serializer.Serialize(writer, "ST23");
                    return;
                case BeatEnum.St24:
                    serializer.Serialize(writer, "ST24");
                    return;
                case BeatEnum.St29:
                    serializer.Serialize(writer, "ST29");
                    return;
                case BeatEnum.St31:
                    serializer.Serialize(writer, "ST31");
                    return;
                case BeatEnum.St32:
                    serializer.Serialize(writer, "ST32");
                    return;
                case BeatEnum.St34:
                    serializer.Serialize(writer, "ST34");
                    return;
                case BeatEnum.St35:
                    serializer.Serialize(writer, "ST35");
                    return;
                case BeatEnum.St37:
                    serializer.Serialize(writer, "ST37");
                    return;
                case BeatEnum.St38:
                    serializer.Serialize(writer, "ST38");
                    return;
                case BeatEnum.St46:
                    serializer.Serialize(writer, "ST46");
                    return;
                case BeatEnum.St49:
                    serializer.Serialize(writer, "ST49");
                    return;
                case BeatEnum.St50:
                    serializer.Serialize(writer, "ST50");
                    return;
                case BeatEnum.St51:
                    serializer.Serialize(writer, "ST51");
                    return;
            }
            throw new Exception("Cannot marshal type BeatEnum");
        }

        public static readonly BeatEnumConverter Singleton = new BeatEnumConverter();
    }

    internal class CfdIncidentTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CfdIncidentType) || t == typeof(CfdIncidentType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ALS":
                    return CfdIncidentType.Als;
                case "BLS":
                    return CfdIncidentType.Bls;
            }
            throw new Exception("Cannot unmarshal type CfdIncidentType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CfdIncidentType)untypedValue;
            switch (value)
            {
                case CfdIncidentType.Als:
                    serializer.Serialize(writer, "ALS");
                    return;
                case CfdIncidentType.Bls:
                    serializer.Serialize(writer, "BLS");
                    return;
            }
            throw new Exception("Cannot marshal type CfdIncidentType");
        }

        public static readonly CfdIncidentTypeConverter Singleton = new CfdIncidentTypeConverter();
    }

    internal class CfdIncidentTypeGroupConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CfdIncidentTypeGroup) || t == typeof(CfdIncidentTypeGroup?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABDOMINAL PAIN / PROBLEMS":
                    return CfdIncidentTypeGroup.AbdominalPainProblems;
                case "PREGNANCY / CHILDBIRTH / MISCARRIAGE":
                    return CfdIncidentTypeGroup.PregnancyChildbirthMiscarriage;
                case "TRAFFIC / TRANSPORTATION INCIDENTS":
                    return CfdIncidentTypeGroup.TrafficTransportationIncidents;
            }
            throw new Exception("Cannot unmarshal type CfdIncidentTypeGroup");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CfdIncidentTypeGroup)untypedValue;
            switch (value)
            {
                case CfdIncidentTypeGroup.AbdominalPainProblems:
                    serializer.Serialize(writer, "ABDOMINAL PAIN / PROBLEMS");
                    return;
                case CfdIncidentTypeGroup.PregnancyChildbirthMiscarriage:
                    serializer.Serialize(writer, "PREGNANCY / CHILDBIRTH / MISCARRIAGE");
                    return;
                case CfdIncidentTypeGroup.TrafficTransportationIncidents:
                    serializer.Serialize(writer, "TRAFFIC / TRANSPORTATION INCIDENTS");
                    return;
            }
            throw new Exception("Cannot marshal type CfdIncidentTypeGroup");
        }

        public static readonly CfdIncidentTypeGroupConverter Singleton = new CfdIncidentTypeGroupConverter();
    }

    internal class DispositionTextConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DispositionText) || t == typeof(DispositionText?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AV: ADVISED":
                    return DispositionText.AvAdvised;
                case "CN: CANCEL":
                    return DispositionText.CnCancel;
                case "DEF: DEFAULT,EMS: NO TRANSPORT":
                    return DispositionText.DefDefaultEmsNoTransport;
                case "DUPF: DUPLICATE":
                    return DispositionText.DupfDuplicate;
                case "DUPLICATE INCIDENT":
                    return DispositionText.DuplicateIncident;
                case "EMS DISREGARD":
                    return DispositionText.EmsDisregard;
                case "EMS FALSE":
                    return DispositionText.EmsFalse;
                case "EMS: NO TRANSPORT":
                    return DispositionText.EmsNoTransport;
                case "EMS: NO TRANSPORT,IN: INVESTIG":
                    return DispositionText.EmsNoTransportInInvestig;
                case "EMSD: DISREGARD":
                    return DispositionText.EmsdDisregard;
                case "EMSF: FALSE":
                    return DispositionText.EmsfFalse;
                case "FD: FIRE DISREGARD":
                    return DispositionText.FdFireDisregard;
                case "GI: GOOD INTENT":
                    return DispositionText.GiGoodIntent;
                case "IN: INVESTIGATION":
                    return DispositionText.InInvestigation;
                case "MED: MT RESPONSE NO TRANSPORT":
                    return DispositionText.MedMtResponseNoTransport;
                case "MEDD: MT DISREGARDED":
                    return DispositionText.MeddMtDisregarded;
                case "MEDF: MT RESPONSE - FALSE":
                    return DispositionText.MedfMtResponseFalse;
                case "MEDIC DISREGARD":
                    return DispositionText.MedicDisregard;
                case "MEDIC TR RESP & TRANSPORTED":
                    return DispositionText.MedicTrRespTransported;
                case "MEDIC TR RESP- NO TRANSPORT":
                    return DispositionText.MedicTrRespNoTransport;
                case "MEDT: MEDIC TRANSPORT":
                    return DispositionText.MedtMedicTransport;
                case "PT: PRIVATE TRANSPORT":
                    return DispositionText.PtPrivateTransport;
                case "TREATED BY COMPANY/NO TRNSPORT":
                    return DispositionText.TreatedByCompanyNoTrnsport;
                case "USED CLEAR BUTTON":
                    return DispositionText.UsedClearButton;
            }
            throw new Exception("Cannot unmarshal type DispositionText");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DispositionText)untypedValue;
            switch (value)
            {
                case DispositionText.AvAdvised:
                    serializer.Serialize(writer, "AV: ADVISED");
                    return;
                case DispositionText.CnCancel:
                    serializer.Serialize(writer, "CN: CANCEL");
                    return;
                case DispositionText.DefDefaultEmsNoTransport:
                    serializer.Serialize(writer, "DEF: DEFAULT,EMS: NO TRANSPORT");
                    return;
                case DispositionText.DupfDuplicate:
                    serializer.Serialize(writer, "DUPF: DUPLICATE");
                    return;
                case DispositionText.DuplicateIncident:
                    serializer.Serialize(writer, "DUPLICATE INCIDENT");
                    return;
                case DispositionText.EmsDisregard:
                    serializer.Serialize(writer, "EMS DISREGARD");
                    return;
                case DispositionText.EmsFalse:
                    serializer.Serialize(writer, "EMS FALSE");
                    return;
                case DispositionText.EmsNoTransport:
                    serializer.Serialize(writer, "EMS: NO TRANSPORT");
                    return;
                case DispositionText.EmsNoTransportInInvestig:
                    serializer.Serialize(writer, "EMS: NO TRANSPORT,IN: INVESTIG");
                    return;
                case DispositionText.EmsdDisregard:
                    serializer.Serialize(writer, "EMSD: DISREGARD");
                    return;
                case DispositionText.EmsfFalse:
                    serializer.Serialize(writer, "EMSF: FALSE");
                    return;
                case DispositionText.FdFireDisregard:
                    serializer.Serialize(writer, "FD: FIRE DISREGARD");
                    return;
                case DispositionText.GiGoodIntent:
                    serializer.Serialize(writer, "GI: GOOD INTENT");
                    return;
                case DispositionText.InInvestigation:
                    serializer.Serialize(writer, "IN: INVESTIGATION");
                    return;
                case DispositionText.MedMtResponseNoTransport:
                    serializer.Serialize(writer, "MED: MT RESPONSE NO TRANSPORT");
                    return;
                case DispositionText.MeddMtDisregarded:
                    serializer.Serialize(writer, "MEDD: MT DISREGARDED");
                    return;
                case DispositionText.MedfMtResponseFalse:
                    serializer.Serialize(writer, "MEDF: MT RESPONSE - FALSE");
                    return;
                case DispositionText.MedicDisregard:
                    serializer.Serialize(writer, "MEDIC DISREGARD");
                    return;
                case DispositionText.MedicTrRespTransported:
                    serializer.Serialize(writer, "MEDIC TR RESP & TRANSPORTED");
                    return;
                case DispositionText.MedicTrRespNoTransport:
                    serializer.Serialize(writer, "MEDIC TR RESP- NO TRANSPORT");
                    return;
                case DispositionText.MedtMedicTransport:
                    serializer.Serialize(writer, "MEDT: MEDIC TRANSPORT");
                    return;
                case DispositionText.PtPrivateTransport:
                    serializer.Serialize(writer, "PT: PRIVATE TRANSPORT");
                    return;
                case DispositionText.TreatedByCompanyNoTrnsport:
                    serializer.Serialize(writer, "TREATED BY COMPANY/NO TRNSPORT");
                    return;
                case DispositionText.UsedClearButton:
                    serializer.Serialize(writer, "USED CLEAR BUTTON");
                    return;
            }
            throw new Exception("Cannot marshal type DispositionText");
        }

        public static readonly DispositionTextConverter Singleton = new DispositionTextConverter();
    }

    internal class IncidentTypeDescConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IncidentTypeDesc) || t == typeof(IncidentTypeDesc?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1ST PARTY CALLER WITH INJURY TO NOT DANGEROUS BODY AREA":
                    return IncidentTypeDesc.The1StPartyCallerWithInjuryToNotDangerousBodyArea;
                case "1ST TRIMESTER HEMORRHAGE OR MISCARRIAGE":
                    return IncidentTypeDesc.The1StTrimesterHemorrhageOrMiscarriage;
                case "1ST TRIMESTER SERIOUS HEMORRHAGE":
                    return IncidentTypeDesc.The1StTrimesterSeriousHemorrhage;
                case "2ND TRIMESTER HEMORRHAGE OR MISCARRIAGE":
                    return IncidentTypeDesc.The2NdTrimesterHemorrhageOrMiscarriage;
                case "3RD TRIMESTER HEMORRHAGE":
                    return IncidentTypeDesc.The3RdTrimesterHemorrhage;
                case "911 CALL NO EMERGENCY INDICATED, NO SPECIFICS":
                    return IncidentTypeDesc.The911CallNoEmergencyIndicatedNoSpecifics;
                case "ABDOMINAL PAIN":
                    return IncidentTypeDesc.AbdominalPain;
            }
            throw new Exception("Cannot unmarshal type IncidentTypeDesc");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (IncidentTypeDesc)untypedValue;
            switch (value)
            {
                case IncidentTypeDesc.The1StPartyCallerWithInjuryToNotDangerousBodyArea:
                    serializer.Serialize(writer, "1ST PARTY CALLER WITH INJURY TO NOT DANGEROUS BODY AREA");
                    return;
                case IncidentTypeDesc.The1StTrimesterHemorrhageOrMiscarriage:
                    serializer.Serialize(writer, "1ST TRIMESTER HEMORRHAGE OR MISCARRIAGE");
                    return;
                case IncidentTypeDesc.The1StTrimesterSeriousHemorrhage:
                    serializer.Serialize(writer, "1ST TRIMESTER SERIOUS HEMORRHAGE");
                    return;
                case IncidentTypeDesc.The2NdTrimesterHemorrhageOrMiscarriage:
                    serializer.Serialize(writer, "2ND TRIMESTER HEMORRHAGE OR MISCARRIAGE");
                    return;
                case IncidentTypeDesc.The3RdTrimesterHemorrhage:
                    serializer.Serialize(writer, "3RD TRIMESTER HEMORRHAGE");
                    return;
                case IncidentTypeDesc.The911CallNoEmergencyIndicatedNoSpecifics:
                    serializer.Serialize(writer, "911 CALL NO EMERGENCY INDICATED, NO SPECIFICS");
                    return;
                case IncidentTypeDesc.AbdominalPain:
                    serializer.Serialize(writer, "ABDOMINAL PAIN");
                    return;
            }
            throw new Exception("Cannot marshal type IncidentTypeDesc");
        }

        public static readonly IncidentTypeDescConverter Singleton = new IncidentTypeDescConverter();
    }

    internal class IncidentTypeIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IncidentTypeId) || t == typeof(IncidentTypeId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1A1":
                    return IncidentTypeId.The1A1;
                case "24A1":
                    return IncidentTypeId.The24A1;
                case "24C1":
                    return IncidentTypeId.The24C1;
                case "24C2":
                    return IncidentTypeId.The24C2;
                case "24D4":
                    return IncidentTypeId.The24D4;
                case "29A1":
                    return IncidentTypeId.The29A1;
                case "911CALL":
                    return IncidentTypeId.The911Call;
            }
            throw new Exception("Cannot unmarshal type IncidentTypeId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (IncidentTypeId)untypedValue;
            switch (value)
            {
                case IncidentTypeId.The1A1:
                    serializer.Serialize(writer, "1A1");
                    return;
                case IncidentTypeId.The24A1:
                    serializer.Serialize(writer, "24A1");
                    return;
                case IncidentTypeId.The24C1:
                    serializer.Serialize(writer, "24C1");
                    return;
                case IncidentTypeId.The24C2:
                    serializer.Serialize(writer, "24C2");
                    return;
                case IncidentTypeId.The24D4:
                    serializer.Serialize(writer, "24D4");
                    return;
                case IncidentTypeId.The29A1:
                    serializer.Serialize(writer, "29A1");
                    return;
                case IncidentTypeId.The911Call:
                    serializer.Serialize(writer, "911CALL");
                    return;
            }
            throw new Exception("Cannot marshal type IncidentTypeId");
        }

        public static readonly IncidentTypeIdConverter Singleton = new IncidentTypeIdConverter();
    }
}
